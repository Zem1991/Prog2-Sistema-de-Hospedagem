package acomodacao;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author Alfredo, Felipe
 */
public class JFrameAcomodacao extends javax.swing.JFrame {
    /** Creates new form JFrameAtividadeTur */
    public JFrameAcomodacao() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AbasAcomodacao = new javax.swing.JTabbedPane();
        AbaHotel = new javax.swing.JPanel();
        jLabelHotel = new javax.swing.JLabel();
        AbaHostelling = new javax.swing.JPanel();
        jLabelHostelling = new javax.swing.JLabel();
        AbaResort = new javax.swing.JPanel();
        jLabelAtivExtraResort = new javax.swing.JLabel();
        jScrollPaneAtivExtraResort = new javax.swing.JScrollPane();
        jTextAtivExtraResort = new javax.swing.JTextArea();
        AbaPousada = new javax.swing.JPanel();
        jLabelPousada = new javax.swing.JLabel();
        AbaCamping = new javax.swing.JPanel();
        jLabelCamping = new javax.swing.JLabel();
        AbaBedAndBreakfast = new javax.swing.JPanel();
        jLabelBedAndBreakfast = new javax.swing.JLabel();
        AbaApartHotel = new javax.swing.JPanel();
        jLabelEquipExtraApartHotel = new javax.swing.JLabel();
        jScrollPaneEquipExtraResort = new javax.swing.JScrollPane();
        jTextEquipExtraApartHotel = new javax.swing.JTextArea();
        jLabelNome = new javax.swing.JLabel();
        jTextNome = new javax.swing.JTextField();
        jLabelLocal = new javax.swing.JLabel();
        jTextLocal = new javax.swing.JTextField();
        jLabelNumero = new javax.swing.JLabel();
        jTextNumero = new javax.swing.JTextField();
        jLabelPrecoDiaria = new javax.swing.JLabel();
        jTextPrecoDiaria = new javax.swing.JTextField();
        jLabelDatasInstanciar = new javax.swing.JLabel();
        jTextDatasInstanciar = new javax.swing.JTextField();
        jLabelQuartosPorAndar = new javax.swing.JLabel();
        jTextQuartosPorAndar = new javax.swing.JTextField();
        jLabelNumeroAndares = new javax.swing.JLabel();
        jTextNumeroAndares = new javax.swing.JTextField();
        jLabelObs = new javax.swing.JLabel();
        jTextObs = new javax.swing.JTextField();
        jBIncluir = new javax.swing.JButton();
        jBLimpar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jLabelClassif = new javax.swing.JLabel();
        jTextClassif = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nova Acomodação");
        setResizable(false);

        jLabelHotel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelHotel.setText("Não necessita de atributos específicos.");

        javax.swing.GroupLayout AbaHotelLayout = new javax.swing.GroupLayout(AbaHotel);
        AbaHotel.setLayout(AbaHotelLayout);
        AbaHotelLayout.setHorizontalGroup(
            AbaHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaHotelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabelHotel)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        AbaHotelLayout.setVerticalGroup(
            AbaHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaHotelLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabelHotel)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        AbasAcomodacao.addTab("Hotel", AbaHotel);

        jLabelHostelling.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelHostelling.setText("Não necessita de atributos específicos.");

        javax.swing.GroupLayout AbaHostellingLayout = new javax.swing.GroupLayout(AbaHostelling);
        AbaHostelling.setLayout(AbaHostellingLayout);
        AbaHostellingLayout.setHorizontalGroup(
            AbaHostellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaHostellingLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabelHostelling)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        AbaHostellingLayout.setVerticalGroup(
            AbaHostellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaHostellingLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabelHostelling)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        AbasAcomodacao.addTab("Hostelling", AbaHostelling);

        jLabelAtivExtraResort.setText("Atividades extras (500 char):");

        jTextAtivExtraResort.setColumns(20);
        jTextAtivExtraResort.setRows(5);
        jScrollPaneAtivExtraResort.setViewportView(jTextAtivExtraResort);

        javax.swing.GroupLayout AbaResortLayout = new javax.swing.GroupLayout(AbaResort);
        AbaResort.setLayout(AbaResortLayout);
        AbaResortLayout.setHorizontalGroup(
            AbaResortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaResortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAtivExtraResort)
                .addContainerGap(128, Short.MAX_VALUE))
            .addGroup(AbaResortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AbaResortLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPaneAtivExtraResort, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        AbaResortLayout.setVerticalGroup(
            AbaResortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaResortLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAtivExtraResort)
                .addContainerGap(178, Short.MAX_VALUE))
            .addGroup(AbaResortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AbaResortLayout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(jScrollPaneAtivExtraResort, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        AbasAcomodacao.addTab("Resort", AbaResort);

        jLabelPousada.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelPousada.setText("Não necessita de atributos específicos.");

        javax.swing.GroupLayout AbaPousadaLayout = new javax.swing.GroupLayout(AbaPousada);
        AbaPousada.setLayout(AbaPousadaLayout);
        AbaPousadaLayout.setHorizontalGroup(
            AbaPousadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaPousadaLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabelPousada)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        AbaPousadaLayout.setVerticalGroup(
            AbaPousadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaPousadaLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabelPousada)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        AbasAcomodacao.addTab("Pousada", AbaPousada);

        jLabelCamping.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelCamping.setText("Não necessita de atributos específicos.");

        javax.swing.GroupLayout AbaCampingLayout = new javax.swing.GroupLayout(AbaCamping);
        AbaCamping.setLayout(AbaCampingLayout);
        AbaCampingLayout.setHorizontalGroup(
            AbaCampingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaCampingLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabelCamping)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        AbaCampingLayout.setVerticalGroup(
            AbaCampingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaCampingLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabelCamping)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        AbasAcomodacao.addTab("Camping", AbaCamping);

        jLabelBedAndBreakfast.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelBedAndBreakfast.setText("Não necessita de atributos específicos.");

        javax.swing.GroupLayout AbaBedAndBreakfastLayout = new javax.swing.GroupLayout(AbaBedAndBreakfast);
        AbaBedAndBreakfast.setLayout(AbaBedAndBreakfastLayout);
        AbaBedAndBreakfastLayout.setHorizontalGroup(
            AbaBedAndBreakfastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaBedAndBreakfastLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabelBedAndBreakfast)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        AbaBedAndBreakfastLayout.setVerticalGroup(
            AbaBedAndBreakfastLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaBedAndBreakfastLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabelBedAndBreakfast)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        AbasAcomodacao.addTab("Bed&Breakfast", AbaBedAndBreakfast);

        jLabelEquipExtraApartHotel.setText("Equipamentos extras (500 char):");

        jTextEquipExtraApartHotel.setColumns(20);
        jTextEquipExtraApartHotel.setRows(5);
        jScrollPaneEquipExtraResort.setViewportView(jTextEquipExtraApartHotel);

        javax.swing.GroupLayout AbaApartHotelLayout = new javax.swing.GroupLayout(AbaApartHotel);
        AbaApartHotel.setLayout(AbaApartHotelLayout);
        AbaApartHotelLayout.setHorizontalGroup(
            AbaApartHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaApartHotelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelEquipExtraApartHotel)
                .addContainerGap(111, Short.MAX_VALUE))
            .addGroup(AbaApartHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AbaApartHotelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPaneEquipExtraResort, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        AbaApartHotelLayout.setVerticalGroup(
            AbaApartHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbaApartHotelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelEquipExtraApartHotel)
                .addContainerGap(178, Short.MAX_VALUE))
            .addGroup(AbaApartHotelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AbaApartHotelLayout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addComponent(jScrollPaneEquipExtraResort, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        AbasAcomodacao.addTab("Apart Hotel", AbaApartHotel);

        jLabelNome.setText("Nome: ");

        jTextNome.setText("Acomodação Teste");

        jLabelLocal.setText("Local (100 char):");

        jTextLocal.setText("Local");
        jTextLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextLocalActionPerformed(evt);
            }
        });

        jLabelNumero.setText("Numero:");

        jTextNumero.setText("001");
        jTextNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNumeroActionPerformed(evt);
            }
        });

        jLabelPrecoDiaria.setText("Preço da diária:");

        jTextPrecoDiaria.setText("50");

        jLabelDatasInstanciar.setText("Datas a instanciar:");

        jTextDatasInstanciar.setText("1");
        jTextDatasInstanciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextDatasInstanciarActionPerformed(evt);
            }
        });

        jLabelQuartosPorAndar.setText("Quartos por andar:");

        jTextQuartosPorAndar.setText("10");

        jLabelNumeroAndares.setText("Numero de andares:");

        jTextNumeroAndares.setText("4");

        jLabelObs.setText("Observações (500 char):");

        jTextObs.setText("Em reforma.");

        jBIncluir.setText("Incluir");
        jBIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBIncluirActionPerformed(evt);
            }
        });

        jBLimpar.setText("Limpar");
        jBLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimparActionPerformed(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jLabelClassif.setText("Clasificação (de 1 a 5 estrelas): ");

        jTextClassif.setText("1");
        jTextClassif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextClassifActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabelObs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextObs, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelDatasInstanciar)
                                    .addComponent(jLabelNome)
                                    .addComponent(jLabelLocal)
                                    .addComponent(jLabelPrecoDiaria)
                                    .addComponent(jLabelNumeroAndares))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextLocal, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextNome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabelNumero))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextPrecoDiaria, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTextDatasInstanciar, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                                    .addComponent(jTextQuartosPorAndar, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                                    .addComponent(jTextNumeroAndares, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))))
                                        .addGap(51, 51, 51)
                                        .addComponent(jLabelClassif)
                                        .addGap(4, 4, 4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextClassif, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                    .addComponent(jTextNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBIncluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBLimpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBCancelar)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelQuartosPorAndar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(AbasAcomodacao, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBCancelar, jBIncluir, jBLimpar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AbasAcomodacao, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNome)
                            .addComponent(jTextNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNumero)
                            .addComponent(jTextNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelLocal)
                            .addComponent(jTextLocal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPrecoDiaria)
                            .addComponent(jTextPrecoDiaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextClassif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelClassif))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDatasInstanciar)
                            .addComponent(jTextDatasInstanciar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelQuartosPorAndar)
                            .addComponent(jTextQuartosPorAndar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNumeroAndares)
                            .addComponent(jTextNumeroAndares, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelObs, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBLimpar)
                            .addComponent(jBIncluir)
                            .addComponent(jBCancelar))
                        .addGap(3, 3, 3))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Limpa o conteúdo de todos os campos.
     */
    private void jBLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimparActionPerformed
        jTextNome.setText(null);
        jTextNumero.setText(null);
        jTextLocal.setText(null);
        jTextPrecoDiaria.setText(null);
        jTextClassif.setText(null);
        jTextDatasInstanciar.setText(null);
        jTextQuartosPorAndar.setText(null);
        jTextNumeroAndares.setText(null);
        jTextObs.setText(null);

        if(AbasAcomodacao.getSelectedComponent() == AbaHotel)
        {
            //Não há componentes extras para a aba Hotel.
        }
        else if(AbasAcomodacao.getSelectedComponent() == AbaHostelling)
        {
            //Não há componentes extras para a aba Hostelling.
        }
        else if(AbasAcomodacao.getSelectedComponent() == AbaResort)
        {
            jTextAtivExtraResort.setText(null);
        }
        else if(AbasAcomodacao.getSelectedComponent() == AbaPousada)
        {
            //Não há componentes extras para a aba Pousada.
        }
        else if(AbasAcomodacao.getSelectedComponent() == AbaCamping)
        {
            //Não há componentes extras para a aba Camping.
        }
        else if(AbasAcomodacao.getSelectedComponent() == AbaBedAndBreakfast)
        {
            //Não há componentes extras para a aba Bed&Breakfast.
        }
        else if(AbasAcomodacao.getSelectedComponent() == AbaApartHotel)
        {
            jTextEquipExtraApartHotel.setText(null);
        }
    }//GEN-LAST:event_jBLimparActionPerformed

    /**
     * Cria o novo arquivo para incluir posteriormente nos roteiros.
     */
    private void jBIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBIncluirActionPerformed
        //CASO SEJA HOTEL.
        if (AbasAcomodacao.getSelectedComponent() == AbaHotel){
            //Não possui atributos específicos.
            Hotel novo = new Hotel
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());
            
            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA HOTEL!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoHotel.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoHotel.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }

        //CASO SEJA HOSTELLING.
        else if(AbasAcomodacao.getSelectedComponent() == AbaHostelling)
        {
            //Não possui atributos específicos.
            Hostelling novo = new Hostelling
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());

            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA HOSTELLING!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoHostelling.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoHostelling.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }

        //CASO SEJA RESORT.
        else if(AbasAcomodacao.getSelectedComponent() == AbaResort)
        {
            Resort novo = new Resort
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());

            novo.setAtividadesExtras(jTextAtivExtraResort.getText());

            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA RESORT!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoResort.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoResort.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }

        //CASO SEJA POUSADA.
        else if(AbasAcomodacao.getSelectedComponent() == AbaPousada)
        {
            //Não possui atributos específicos.
            Pousada novo = new Pousada
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());

            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA POUSADA!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoPousada.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoPousada.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }

        //CASO SEJA CAMPING.
        if (AbasAcomodacao.getSelectedComponent() == AbaCamping){
            //Não possui atributos específicos.
            Camping novo = new Camping
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());

            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA CAMPING!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoCamping.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoCamping.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }

        //CASO SEJA BEDANDBREAKFAST.
        else if(AbasAcomodacao.getSelectedComponent() == AbaBedAndBreakfast)
        {
            //Não possui atributos específicos.
            BedAndBreakfast novo = new BedAndBreakfast
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());

            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA B&B!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoBedAndBreakfast.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoBedAndBreakfast.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }

        //CASO SEJA APART HOTEL.
        else if(AbasAcomodacao.getSelectedComponent() == AbaApartHotel)
        {
            ApartHotel novo = new ApartHotel
                (jTextNome.getText(),
                Integer.parseInt(jTextNumero.getText()));
            novo.setPrecoDiaria(Double.parseDouble(jTextPrecoDiaria.getText()));
            novo.setLocal(jTextLocal.getText());
            novo.setClassificacao((byte) Integer.parseInt(jTextClassif.getText()));
            novo.setObservacoes(jTextObs.getText());

            novo.setEquipamentosExtras(jTextEquipExtraApartHotel.getText());

            JOptionPane.showMessageDialog(null,
                        "DISPONIBILIDADES PENDENTES PARA APART HOTEL!");

            //Fluxo
            System.out.println("--------------------");
            System.out.println("Fluxo de arquivo iniciado");
            try
            {
                //Escrtitora por linha
                FileWriter out = new FileWriter("AcomodacaoApartHotel.txt", true);
                PrintWriter escreve = new PrintWriter(out);
                System.out.println("Escritora de arquivo criada.");

                //Leitora do arquivo para cadastro de novas aventuras
                FileInputStream stream = new FileInputStream("AcomodacaoApartHotel.txt");
                InputStreamReader streamReader = new InputStreamReader(stream);
                BufferedReader in = new BufferedReader(streamReader);
                System.out.println("Leitor de arquvo criado.");

                String s = null;

                //Escreve depois das linhas ja escritas
                do{
                    s = in.readLine();
                    if(s==null)
                    {
                          escreve.println(novo.getNome());
                          escreve.println(novo.getPrecoDiaria());
                          escreve.println(novo.getNumero());
                          escreve.println(novo.getSubTipo());
                          escreve.println(novo.getLocal());
                          escreve.println(novo.getClassificacao());
                          escreve.println(novo.getObservacoes());
                          escreve.println(novo.getQtdDeDatas());
                          escreve.println(novo.getQtdDeQuartos());
                          escreve.println("*** RESERVADO PARA DISPONIBILIDADES ***");

                          //Separador
                          escreve.println("//");
                          System.out.println("Entrada de dados completa.");
                    }
                }while(s != null);
                escreve.flush();
                escreve.close();
                out.close();
                streamReader.close();
                in.close();
                stream.close();

            } catch(IOException e)
            {
                 JOptionPane.showMessageDialog(null,
                        "Erro! Arquivo não pode ser criado.");
            }
            System.out.println("Fluxo de arquivo terminado.");
            System.out.println("--------------------");
        }
}//GEN-LAST:event_jBIncluirActionPerformed

    private void jTextDatasInstanciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextDatasInstanciarActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextDatasInstanciarActionPerformed

    private void jTextLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextLocalActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextLocalActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jTextNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNumeroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNumeroActionPerformed

    private void jTextClassifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextClassifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextClassifActionPerformed

    /**
     * Cria um novo objeto derivado de Acomodacao.
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JFrameAcomodacao().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AbaApartHotel;
    private javax.swing.JPanel AbaBedAndBreakfast;
    private javax.swing.JPanel AbaCamping;
    private javax.swing.JPanel AbaHostelling;
    private javax.swing.JPanel AbaHotel;
    private javax.swing.JPanel AbaPousada;
    private javax.swing.JPanel AbaResort;
    private javax.swing.JTabbedPane AbasAcomodacao;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBIncluir;
    private javax.swing.JButton jBLimpar;
    private javax.swing.JLabel jLabelAtivExtraResort;
    private javax.swing.JLabel jLabelBedAndBreakfast;
    private javax.swing.JLabel jLabelCamping;
    private javax.swing.JLabel jLabelClassif;
    private javax.swing.JLabel jLabelDatasInstanciar;
    private javax.swing.JLabel jLabelEquipExtraApartHotel;
    private javax.swing.JLabel jLabelHostelling;
    private javax.swing.JLabel jLabelHotel;
    private javax.swing.JLabel jLabelLocal;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelNumero;
    private javax.swing.JLabel jLabelNumeroAndares;
    private javax.swing.JLabel jLabelObs;
    private javax.swing.JLabel jLabelPousada;
    private javax.swing.JLabel jLabelPrecoDiaria;
    private javax.swing.JLabel jLabelQuartosPorAndar;
    private javax.swing.JScrollPane jScrollPaneAtivExtraResort;
    private javax.swing.JScrollPane jScrollPaneEquipExtraResort;
    private javax.swing.JTextArea jTextAtivExtraResort;
    private javax.swing.JTextField jTextClassif;
    private javax.swing.JTextField jTextDatasInstanciar;
    private javax.swing.JTextArea jTextEquipExtraApartHotel;
    private javax.swing.JTextField jTextLocal;
    private javax.swing.JTextField jTextNome;
    private javax.swing.JTextField jTextNumero;
    private javax.swing.JTextField jTextNumeroAndares;
    private javax.swing.JTextField jTextObs;
    private javax.swing.JTextField jTextPrecoDiaria;
    private javax.swing.JTextField jTextQuartosPorAndar;
    // End of variables declaration//GEN-END:variables
}
